import { createAdminSupabase, type Database } from '@/lib/supabase'

export type PurchaseOrder = Database['public']['Tables']['purchase_orders']['Row']
export type PurchaseOrderInsert = Database['public']['Tables']['purchase_orders']['Insert']
export type PurchaseOrderUpdate = Database['public']['Tables']['purchase_orders']['Update']
export type POStatus = 'draft' | 'ordered' | 'received'

export type PurchaseOrderItem = Database['public']['Tables']['purchase_order_items']['Row']
export type PurchaseOrderItemInsert = Database['public']['Tables']['purchase_order_items']['Insert']

// Client-side functions (for use in React components)
export class PurchaseOrdersClientService {
  private supabase = createAdminSupabase()

  async getAllPurchaseOrders(): Promise<PurchaseOrder[]> {
    const { data, error } = await this.supabase
      .from('purchase_orders')
      .select('*')
      .order('created_at', { ascending: false })

    if (error) {
      throw new Error(`Failed to fetch purchase orders: ${error.message}`)
    }

    return data || []
  }

  async getPOsByStatus(status: POStatus): Promise<PurchaseOrder[]> {
    const { data, error } = await this.supabase
      .from('purchase_orders')
      .select('*')
      .eq('status', status)
      .order('created_at', { ascending: false })

    if (error) {
      throw new Error(`Failed to fetch purchase orders by status: ${error.message}`)
    }

    return data || []
  }
}

// Server-side functions (for use in Server Components and API routes)
export class PurchaseOrdersServerService {
  private supabase = createAdminSupabase()

  async createPurchaseOrder(
    items: Array<{
      item_id: string
      item_name: string
      item_description?: string
      requested_quantity: number
      unit_price?: number
    }>,
    supplierName?: string,
    notes?: string,
    autoGenerated: boolean = false
  ): Promise<PurchaseOrder> {
    // Generate PO number
    const poNumber = await this.generatePONumber()

    // Create the purchase order
    const { data: po, error: poError } = await this.supabase
      .from('purchase_orders')
      .insert({
        po_number: poNumber,
        status: 'draft',
        supplier_name: supplierName || null,
        notes: notes || null,
        auto_generated: autoGenerated,
        created_by: 'admin' // Simple auth system
      })
      .select()
      .single()

    if (poError) {
      throw new Error(`Failed to create purchase order: ${poError.message}`)
    }

    return po
  }

  private async generatePONumber(): Promise<string> {
    const year = new Date().getFullYear()
    const month = (new Date().getMonth() + 1).toString().padStart(2, '0')
    const count = Math.floor(Math.random() * 999) + 1 // Simple counter for now
    return `PO-${year}${month}-${String(count).padStart(3, '0')}`
  }
}

// Business Logic for Auto-PO Generation
export class AutoPOService {
  async checkLowStockAndGeneratePO(): Promise<{ success: boolean, message: string, poNumber?: string }> {
    // This is a mock implementation for now
    // In real implementation, this would:
    // 1. Check for items below minimum stock
    // 2. Generate purchase orders automatically
    // 3. Log the operation
    
    return {
      success: true,
      message: "Auto-PO generation ready - will check stock levels and create POs when needed",
      poNumber: undefined
    }
  }
}

// Export instances for easy use
export const purchaseOrdersClient = new PurchaseOrdersClientService()
export const purchaseOrdersServer = new PurchaseOrdersServerService()
export const autoPOService = new AutoPOService()
