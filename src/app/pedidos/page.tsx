import { redirect } from 'next/navigation'
import { getUser } from '@/lib/simple-auth'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { HardHat, Package, History, ShoppingCart, LogOut, User, Search, Filter, Plus, Eye } from 'lucide-react'
import { Input } from '@/components/ui/input'

// Mock purchase orders data (representing Supabase purchase_orders table)
const mockPurchaseOrders = [
  {
    id: '1',
    po_number: 'PO-202401-001',
    status: 'draft',
    supplier_name: 'Construmart Materials',
    supplier_email: 'pedidos@construmart.com.br',
    total_amount: 2500.00,
    notes: 'Pedido urgente para obra Site Alpha',
    created_at: '2024-01-20T09:30:00Z',
    ordered_at: null,
    received_at: null,
    created_by: 'admin',
    auto_generated: false
  },
  {
    id: '2',
    po_number: 'PO-202401-002',
    status: 'ordered',
    supplier_name: 'Ferragem Central',
    supplier_email: 'vendas@ferragemcentral.com.br',
    total_amount: 4200.50,
    notes: 'Material para funda√ß√£o - entrega at√© 25/01',
    created_at: '2024-01-18T14:15:00Z',
    ordered_at: '2024-01-19T10:00:00Z',
    received_at: null,
    created_by: 'admin',
    auto_generated: false
  },
  {
    id: '3',
    po_number: 'PO-202401-003',
    status: 'received',
    supplier_name: 'EPI Seguran√ßa Total',
    supplier_email: 'atendimento@episeguranca.com.br',
    total_amount: 850.75,
    notes: 'Equipamentos de prote√ß√£o individual',
    created_at: '2024-01-15T11:20:00Z',
    ordered_at: '2024-01-16T08:30:00Z',
    received_at: '2024-01-18T16:45:00Z',
    created_by: 'admin',
    auto_generated: true
  }
]

// Mock purchase order items data (representing Supabase purchase_order_items table)
const mockPurchaseOrderItems = [
  {
    id: '1',
    po_id: '1',
    item_id: 'item-123',
    requested_quantity: 50,
    received_quantity: null,
    unit_price: 35.50,
    item_name: 'Portland Cement 50kg',
    item_description: 'High-strength Portland cement',
    created_at: '2024-01-20T09:30:00Z'
  },
  {
    id: '2',
    po_id: '1',
    item_id: 'item-124',
    requested_quantity: 100,
    received_quantity: null,
    unit_price: 8.75,
    item_name: 'Construction Sand',
    item_description: 'Fine construction sand for mortar',
    created_at: '2024-01-20T09:30:00Z'
  },
  {
    id: '3',
    po_id: '2',
    item_id: 'item-125',
    requested_quantity: 200,
    received_quantity: null,
    unit_price: 15.25,
    item_name: 'Steel Rebar 12mm',
    item_description: 'Construction steel rebar',
    created_at: '2024-01-18T14:15:00Z'
  },
  {
    id: '4',
    po_id: '3',
    item_id: 'item-126',
    requested_quantity: 25,
    received_quantity: 25,
    unit_price: 34.03,
    item_name: 'Safety Helmet Class E',
    item_description: 'Electrical safety helmet',
    created_at: '2024-01-15T11:20:00Z'
  }
]

function getStatusBadge(status: string, autoGenerated: boolean = false) {
  const baseClasses = "px-2 py-1 text-xs rounded-full flex items-center space-x-1"
  
  switch (status) {
    case 'draft':
      return (
        <span className={`${baseClasses} bg-gray-100 text-gray-800`}>
          {autoGenerated && <span>ü§ñ</span>}
          <span>Rascunho</span>
        </span>
      )
    case 'ordered':
      return (
        <span className={`${baseClasses} bg-blue-100 text-blue-800`}>
          {autoGenerated && <span>ü§ñ</span>}
          <span>Pedido</span>
        </span>
      )
    case 'received':
      return (
        <span className={`${baseClasses} bg-green-100 text-green-800`}>
          {autoGenerated && <span>ü§ñ</span>}
          <span>Recebido</span>
        </span>
      )
    default:
      return <span className={`${baseClasses} bg-gray-100 text-gray-800`}>-</span>
  }
}

export default async function PedidosPage() {
  const user = await getUser()

  if (!user) {
    redirect('/login')
  }

  return (
    <div className="min-h-screen bg-slate-50 flex">
      {/* Left Sidebar Navigation */}
      <aside className="w-64 bg-white border-r border-slate-200 flex flex-col">
        {/* Logo/Header */}
        <div className="p-6 border-b border-slate-200">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-amber-100 rounded-lg">
              <HardHat className="h-6 w-6 text-amber-600" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-slate-900">Stock Manager</h1>
              <p className="text-xs text-slate-500">Construction</p>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-1 p-4 space-y-2">
          <a href="/dashboard" className="flex items-center space-x-3 px-3 py-2 rounded-lg text-slate-600 hover:bg-slate-50 transition-colors">
            <Package className="h-5 w-5" />
            <span>Dashboard</span>
          </a>
          <a href="/estoque" className="flex items-center space-x-3 px-3 py-2 rounded-lg text-slate-600 hover:bg-slate-50 transition-colors">
            <Package className="h-5 w-5" />
            <span>Estoque</span>
          </a>
          <a href="/historico" className="flex items-center space-x-3 px-3 py-2 rounded-lg text-slate-600 hover:bg-slate-50 transition-colors">
            <History className="h-5 w-5" />
            <span>Hist√≥rico</span>
          </a>
          <a href="/pedidos" className="flex items-center space-x-3 px-3 py-2 rounded-lg bg-amber-50 text-amber-700 border border-amber-200">
            <ShoppingCart className="h-5 w-5" />
            <span className="font-medium">Pedidos</span>
          </a>
        </nav>

        {/* User Section */}
        <div className="p-4 border-t border-slate-200">
          <div className="flex items-center space-x-3 mb-3">
            <div className="w-8 h-8 bg-amber-100 rounded-full flex items-center justify-center">
              <User className="h-4 w-4 text-amber-600" />
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-slate-900 truncate">{user.email}</p>
              <p className="text-xs text-slate-500">Administrator</p>
            </div>
          </div>
          <form action="/api/auth/signout" method="post">
            <Button 
              type="submit"
              variant="outline" 
              size="sm"
              className="w-full flex items-center justify-center space-x-2"
            >
              <LogOut className="h-4 w-4" />
              <span>Sign Out</span>
            </Button>
          </form>
        </div>
      </aside>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Top Header with Actions */}
        <header className="bg-white border-b border-slate-200 px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-slate-900">Pedidos de Compra</h2>
              <p className="text-sm text-slate-600 mt-1">Gerenciamento de ordens de compra e fornecedores</p>
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" className="flex items-center space-x-2">
                <Filter className="h-4 w-4" />
                <span>Filtrar</span>
              </Button>
              <Button className="bg-amber-600 hover:bg-amber-700 text-white flex items-center space-x-2">
                <Plus className="h-4 w-4" />
                <span>Novo Pedido</span>
              </Button>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 p-6 overflow-auto">
          {/* Search and Filters */}
          <div className="mb-6">
            <div className="flex items-center space-x-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                <Input 
                  placeholder="Buscar por n√∫mero, fornecedor ou item..." 
                  className="pl-10"
                />
              </div>
              <div className="flex space-x-2">
                <Button variant="outline" size="sm">Todos</Button>
                <Button variant="outline" size="sm">Rascunho</Button>
                <Button variant="outline" size="sm">Pedidos</Button>
                <Button variant="outline" size="sm">Recebidos</Button>
              </div>
            </div>
          </div>

          <div className="space-y-6">
            {/* Purchase Orders Table */}
            <Card>
              <CardHeader>
                <CardTitle>Pedidos de Compra</CardTitle>
                <CardDescription>
                  Tabela 'purchase_orders' do Supabase ({mockPurchaseOrders.length} pedidos)
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-4 font-medium text-slate-600">N√∫mero</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Fornecedor</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Status</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Valor Total</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Criado</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Observa√ß√µes</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">A√ß√µes</th>
                      </tr>
                    </thead>
                    <tbody>
                      {mockPurchaseOrders.map((po) => (
                        <tr key={po.id} className="border-b hover:bg-slate-50 transition-colors">
                          <td className="py-3 px-4">
                            <div className="flex items-center space-x-2">
                              <span className="font-medium text-slate-900">{po.po_number}</span>
                              {po.auto_generated && (
                                <span className="text-xs bg-purple-100 text-purple-700 px-1 rounded">AUTO</span>
                              )}
                            </div>
                          </td>
                          <td className="py-3 px-4">
                            <div>
                              <p className="font-medium text-slate-900">{po.supplier_name}</p>
                              <p className="text-sm text-slate-500">{po.supplier_email}</p>
                            </div>
                          </td>
                          <td className="py-3 px-4">
                            {getStatusBadge(po.status, po.auto_generated)}
                          </td>
                          <td className="py-3 px-4">
                            <span className="font-medium text-slate-900">
                              {po.total_amount ? `R$ ${po.total_amount.toFixed(2)}` : '-'}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-slate-600">
                              {new Date(po.created_at).toLocaleDateString('pt-BR')}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-slate-600 truncate max-w-xs block">
                              {po.notes}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            <Button variant="outline" size="sm" className="flex items-center space-x-1">
                              <Eye className="h-3 w-3" />
                              <span>Ver</span>
                            </Button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>

            {/* Purchase Order Items Table */}
            <Card>
              <CardHeader>
                <CardTitle>Itens dos Pedidos</CardTitle>
                <CardDescription>
                  Tabela 'purchase_order_items' do Supabase ({mockPurchaseOrderItems.length} itens)
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Pedido</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Item</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Qtd. Solicitada</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Qtd. Recebida</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Pre√ßo Unit.</th>
                        <th className="text-left py-3 px-4 font-medium text-slate-600">Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      {mockPurchaseOrderItems.map((item) => {
                        const po = mockPurchaseOrders.find(p => p.id === item.po_id)
                        const total = item.unit_price * item.requested_quantity
                        return (
                          <tr key={item.id} className="border-b hover:bg-slate-50 transition-colors">
                            <td className="py-3 px-4">
                              <span className="text-sm font-medium text-blue-600">
                                {po?.po_number}
                              </span>
                            </td>
                            <td className="py-3 px-4">
                              <div>
                                <p className="font-medium text-slate-900">{item.item_name}</p>
                                <p className="text-sm text-slate-500">{item.item_description}</p>
                              </div>
                            </td>
                            <td className="py-3 px-4">
                              <span className="text-sm text-slate-700">{item.requested_quantity}</span>
                            </td>
                            <td className="py-3 px-4">
                              <span className="text-sm text-slate-700">
                                {item.received_quantity || '-'}
                              </span>
                            </td>
                            <td className="py-3 px-4">
                              <span className="text-sm text-slate-700">
                                R$ {item.unit_price.toFixed(2)}
                              </span>
                            </td>
                            <td className="py-3 px-4">
                              <span className="font-medium text-slate-900">
                                R$ {total.toFixed(2)}
                              </span>
                            </td>
                          </tr>
                        )
                      })}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </div>
  )
}
